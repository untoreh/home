
(defun char-upcase-p (c)
  (equal c (upcase c)))

(defun my/split-string-titlecase (s)
  (let ((i 0)
        (idx '())
        (res '())
        )
    (mapc
     (lambda (c)
       (when (char-upcase-p c)
         (push i idx))
       (cl-incf i))
     (split-string s "" t))
    (setq idx (reverse idx))
    (when (equal 0 (cl-first idx))
      (pop idx))
    (let ((pos 0))
      (mapc (lambda (i)
              (push (substring s pos i) res)
              (setq pos i)) idx)
      (push (substring s pos (length s)) res))
    (reverse res)))

(defun get-captures (string regexp)
  (let ((captures '())
        (start 0))
    (when (string-match regexp string start)
      (prin1 "test.el:30")
      (dotimes (i (1- (length (match-data))) captures)
        (prin1 "test.el:31")
        (push (substring (1+ i) string) captures))
      )
    captures))
(let ((s  "kBstractString")
      (rx (rxt-pcre-to-elisp "(([^A-Z]+)|([A-Z][^A-Z]+))+")))
  (get-captures rx s)
  )
