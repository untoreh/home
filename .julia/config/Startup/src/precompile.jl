precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{Type{Task}, Any})
precompile(Tuple{typeof(Base.schedule), Task})
precompile(Tuple{typeof(OhMyREPL.colorscheme!), String})
precompile(Tuple{typeof(Base.getproperty), OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Symbol})
precompile(Tuple{typeof(REPL.find_hist_file)})
precompile(Tuple{OhMyREPL.var"#2#5", REPL.LineEditREPL})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{OhMyREPL.var"#3#6"})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#26#53", String}, Any, Any})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{OhMyREPL.Prompt.var"#26#53", Any, Any, Any})
precompile(Tuple{typeof(Base.withenv), OhMyREPL.Prompt.var"#27#54"{REPL.LineEdit.MIState, Module}, Pair{String, Nothing}})
precompile(Tuple{typeof(JLFzf.read_repl_hist)})
precompile(Tuple{typeof(JLFzf.inter_fzf), Array{Base.SubString{String}, 1}, String, Vararg{String}})
precompile(Tuple{typeof(JLFzf.inter_fzf), String, String, Vararg{String}})
precompile(Tuple{typeof(fzf_jll.fzf), Function})
precompile(Tuple{fzf_jll.var"##fzf#3", Bool, Bool, typeof(fzf_jll.fzf), Function})
precompile(Tuple{typeof(JLLWrappers.withenv_executable_wrapper), Function, String, String, String, Bool, Bool})
precompile(Tuple{typeof(JLLWrappers.adjust_ENV!), Base.Dict{K, V} where V where K, String, String, Bool, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{Base.var"#764#765"{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Base.PipeEndpoint, Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JLFzf.insert_history_to_repl), REPL.LineEdit.MIState, Base.SubString{String}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.ModeState, Symbol})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#21#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#21#48", Any, Any, Any})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#113", Any, typeof(REPL.LineEdit.edit_abort), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{REPL.var"#60#66"{REPL.REPLBackendRef}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, Nothing}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, String}, Int64})
# precompile(Tuple{typeof(Revise.iswritable), String})
# precompile(Tuple{typeof(Revise.watch_manifest), String})
# precompile(Tuple{Revise.var"#107#108"})
# precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
# precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
# precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
# precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
# precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
# precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Startup.myreplinit), REPL.LineEditREPL})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#23#50", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#23#50", Any, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.copy!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.PkgId, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{Base.var"##s92#239", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:wait,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.open), Function, String})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{Float64}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{Type{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:version, :channel, :build), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:version, :channel, :build), Tuple{String, String, String}}, Type{NamedTuple{(:version, :channel, :build), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.:(âˆ‰)), Char, String})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.Unicode.lowercase), Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:allow_glob,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:allow_glob,), Tuple{Bool}}, Type{NamedTuple{(:allow_regex, :allow_glob), T} where T<:Tuple}})
precompile(Tuple{Type{NamedTuple{(:allow_empty,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:allow_empty,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:allow_empty,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:allow_empty,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:allow_empty,), Tuple{Bool}}, Type{NamedTuple{(:allow_empty,), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.occursin), Char, String})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:version, :binary), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:version, :binary), Tuple{String, String}}, Type{NamedTuple{(:version, :binary), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.replace), String, Pair{Base.Regex, String}})
precompile(Tuple{typeof(Base.in), String, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.getproperty), Base.Filesystem.StatStruct, Symbol})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, Char})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Array{String, 1}}}})
precompile(Tuple{Base.var"#767#768"{Base.Process}})
precompile(Tuple{typeof(Base.pointer), Array{Int32, 1}})
precompile(Tuple{typeof(Base.mod), Int64, Type{Int64}})
precompile(Tuple{Type{NamedTuple{(:filename, :mode), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:filename, :mode), Tuple{String, String}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:filename, :mode), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:filename, :mode), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:filename, :mode), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators._pairs_elt), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:filename, :mode), Tuple{String, String}}}, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{49, Symbol}})
precompile(Tuple{typeof(Base._findfirst_loop), Base.Fix2{typeof(Base.:(==)), Symbol}, NTuple{49, Symbol}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{Type{UndefVarError}, Symbol})
precompile(Tuple{typeof(Base.in), String, Base.KeySet{String, Base.EnvDict}})
precompile(Tuple{typeof(Base.pop!), Base.EnvDict, String})
precompile(Tuple{typeof(Base.setindex!), Array{Function, 1}, Function, Int64})
precompile(Tuple{Type{Base.GC_Diff}, Base.GC_Num, Base.GC_Num})
precompile(Tuple{typeof(Base.getproperty), Base.GC_Diff, Symbol})
precompile(Tuple{typeof(Base.gc_alloc_count), Base.GC_Diff})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64, UInt64, UInt64, Bool, Bool})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(REPL.Terminals.enable_bracketed_paste), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.Terminals.clear_line), REPL.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.tail), Tuple{UInt32, UInt32}})
precompile(Tuple{typeof(Base.:(+)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, UInt16})
precompile(Tuple{typeof(Base.withenv), JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{4, String}}, String}, Pair{String, String}, Vararg{Pair{String, String}}})
precompile(Tuple{JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{4, String}}, String}})
precompile(Tuple{JLFzf.var"#1#2"{String, NTuple{4, String}}, String})
precompile(Tuple{typeof(Base.arg_gen), NTuple{4, String}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Function, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{UInt64, UInt64}, Tuple{UInt64, UInt64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{UInt64, UInt64}, Tuple{UInt64, UInt64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{UInt64, UInt64}, Tuple{UInt64, UInt64}}}})
precompile(Tuple{typeof(Base.first), Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base.last), Tuple{UInt64, UInt64}})
precompile(Tuple{Type{NamedTuple{(:rule,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines, :skip_whitespace), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:kind, :flags), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind, UInt16}})
precompile(Tuple{Type{NamedTuple{(:error,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:where_enabled,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled, :space_sensitive, :where_enabled, :whitespace_newline, :for_generator), T} where T<:Tuple}, NTuple{5, Bool}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled, :space_sensitive, :where_enabled, :whitespace_newline), T} where T<:Tuple}, NTuple{4, Bool}})
precompile(Tuple{Type{NamedTuple{(:kind,), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind}})
precompile(Tuple{Type{NamedTuple{(:whitespace_newline, :space_sensitive, :end_symbol), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines, :error), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{Type{NamedTuple{(:end_symbol,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:error,), Tuple{String}}}})
precompile(Tuple{Type{NamedTuple{(:remap_kind,), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:remap_kind,), Tuple{JuliaSyntax.Kind}}}})
precompile(Tuple{Type{NamedTuple{(:warning,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:for_generator,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:whitespace, :warning), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{Type{NamedTuple{(:emit_dot_node,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{UInt16}})
precompile(Tuple{Type{NamedTuple{(:whitespace, :error), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TerminalBuffer, Int64})
